{"ast":null,"code":"var _jsxFileName = \"/home/matias/codeprojects/fstack/blogilista-front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Blog from './components/Blog';\nimport blogService from './services/blogs';\nimport userService from './services/user';\nimport CreateNewBlogWindow from './components/CreateNewBlogWindow';\nimport Togglable from './components/Togglable';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [blogs, setBlogs] = useState([]);\n  const [user, setUser] = useState(null);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [notification, setNotification] = useState(null);\n  const blogFormRef = useRef();\n\n  const addNewBlogLocal = newBlog => {\n    blogFormRef.current.toggleVisibility();\n    let newBlogs = [...blogs, newBlog];\n    setBlogs(newBlogs);\n    setNotification({\n      text: `${newBlog.title} added!`,\n      style: 'green'\n    });\n    setTimeout(() => {\n      setNotification(null);\n    }, 3000);\n  };\n\n  const handleLogin = async event => {\n    event.preventDefault();\n    const credentials = {\n      username,\n      password\n    };\n    console.log('trying to log in', credentials);\n\n    try {\n      const user = await userService.signIn(credentials);\n      console.log(user);\n      setUser(user);\n      setUsername('');\n      setPassword('');\n      window.localStorage.setItem('user', JSON.stringify(user));\n      blogService.setToken(user.token);\n    } catch (e) {\n      setNotification({\n        text: e.message,\n        style: 'red'\n      });\n      setTimeout(() => {\n        setNotification(null);\n      }, 5000);\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.clear();\n    setUser(null);\n    blogService.setToken(null);\n  };\n\n  const Notification = () => {\n    if (notification === null) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: notification.style,\n        color: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: notification.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  };\n\n  const LoginForm = () => {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: 'block'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 57\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: username,\n          placeholder: \"Enter Username\",\n          name: \"uname\",\n          onChange: ({\n            target\n          }) => setUsername(target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: 'block'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 57\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          placeholder: \"Enter Password\",\n          name: \"psw\",\n          onChange: ({\n            target\n          }) => setPassword(target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            display: 'block'\n          },\n          type: \"submit\",\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  };\n\n  const updateBlog = (idx, field, value) => {\n    const newBlog = [...blogs];\n    newBlog[idx][field] = value;\n    setBlogs(newBlog);\n  };\n\n  const BlogsList = () => {\n    console.log(blogs);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"blogs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), blogs.map((blog, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          outline: '1px dashed black',\n          margin: '4px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Blog, {\n          updateBlog: (field, value) => {\n            updateBlog(idx, field, value);\n          },\n          blog: blog\n        }, blog.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this)\n      }, Math.random(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  };\n\n  const UserInfo = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"logged in as \", user.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  };\n\n  const LoggedInView = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(UserInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Togglable, {\n        ref: blogFormRef,\n        closeButtonLabel: \"cancel\",\n        openButtonLabel: \"add new blog\",\n        children: /*#__PURE__*/_jsxDEV(CreateNewBlogWindow, {\n          addBlog: addNewBlogLocal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BlogsList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n\n  useEffect(() => {\n    console.log('use effect ran');\n    let user = window.localStorage.getItem('user');\n    console.log(user);\n    user = JSON.parse(user);\n\n    if (user) {\n      setUser(user);\n      blogService.setToken(user.token);\n    } //Async stuff\n\n\n    async function doStuff() {\n      const blogs = await blogService.getAll();\n      console.log(blogs);\n      setBlogs(blogs);\n      sortBlogs(blogs);\n    }\n\n    doStuff();\n  }, []);\n\n  const sortBlogs = blogs => {\n    let sortedBlogs = [...blogs];\n    sortedBlogs.sort((a, b) => {\n      return b.likes < a.likes ? -1 : b.likes > a.likes ? 1 : 0;\n    });\n    setBlogs(sortedBlogs);\n    console.log('sorted blogs', sortedBlogs);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), user ? LoggedInView() : LoginForm()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"znDBIY8ssytrEiMASi2H43aPk/0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/matias/codeprojects/fstack/blogilista-front/src/App.js"],"names":["React","useState","useEffect","useRef","Blog","blogService","userService","CreateNewBlogWindow","Togglable","App","blogs","setBlogs","user","setUser","username","setUsername","password","setPassword","notification","setNotification","blogFormRef","addNewBlogLocal","newBlog","current","toggleVisibility","newBlogs","text","title","style","setTimeout","handleLogin","event","preventDefault","credentials","console","log","signIn","window","localStorage","setItem","JSON","stringify","setToken","token","e","message","handleLogout","clear","Notification","backgroundColor","color","LoginForm","display","target","value","updateBlog","idx","field","BlogsList","map","blog","outline","margin","id","Math","random","UserInfo","LoggedInView","getItem","parse","doStuff","getAll","sortBlogs","sortedBlogs","sort","a","b","likes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,mBAAP,MAAgC,kCAAhC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,IAAD,CAAhD;AAEA,QAAMmB,WAAW,GAAGjB,MAAM,EAA1B;;AAEA,QAAMkB,eAAe,GAAIC,OAAD,IAAa;AACjCF,IAAAA,WAAW,CAACG,OAAZ,CAAoBC,gBAApB;AACA,QAAIC,QAAQ,GAAG,CAAC,GAAGf,KAAJ,EAAWY,OAAX,CAAf;AACAX,IAAAA,QAAQ,CAACc,QAAD,CAAR;AACAN,IAAAA,eAAe,CAAC;AACZO,MAAAA,IAAI,EAAG,GAAEJ,OAAO,CAACK,KAAM,SADX;AAEZC,MAAAA,KAAK,EAAE;AAFK,KAAD,CAAf;AAIAC,IAAAA,UAAU,CAAC,MAAM;AACbV,MAAAA,eAAe,CAAC,IAAD,CAAf;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAXD;;AAaA,QAAMW,WAAW,GAAG,MAAOC,KAAP,IAAiB;AACjCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,WAAW,GAAG;AAAEnB,MAAAA,QAAF;AAAYE,MAAAA;AAAZ,KAApB;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,WAAhC;;AACA,QAAI;AACA,YAAMrB,IAAI,GAAG,MAAMN,WAAW,CAAC8B,MAAZ,CAAmBH,WAAnB,CAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYvB,IAAZ;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,MAAAA,WAAW,CAAC,EAAD,CAAX;AAEAoB,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CACI,MADJ,EACYC,IAAI,CAACC,SAAL,CAAe7B,IAAf,CADZ;AAGAP,MAAAA,WAAW,CAACqC,QAAZ,CAAqB9B,IAAI,CAAC+B,KAA1B;AACH,KAXD,CAYA,OAAOC,CAAP,EAAU;AACNzB,MAAAA,eAAe,CAAC;AACZO,QAAAA,IAAI,EAAEkB,CAAC,CAACC,OADI;AAEZjB,QAAAA,KAAK,EAAE;AAFK,OAAD,CAAf;AAIAC,MAAAA,UAAU,CAAC,MAAM;AACbV,QAAAA,eAAe,CAAC,IAAD,CAAf;AACH,OAFS,EAEP,IAFO,CAAV;AAGH;AACJ,GAzBD;;AA2BA,QAAM2B,YAAY,GAAG,MAAM;AACvBR,IAAAA,YAAY,CAACS,KAAb;AACAlC,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAR,IAAAA,WAAW,CAACqC,QAAZ,CAAqB,IAArB;AACH,GAJD;;AAMA,QAAMM,YAAY,GAAG,MAAM;AACvB,QAAI9B,YAAY,KAAK,IAArB,EAA0B;AACtB,0BAAQ,qCAAR;AACH;;AACD,wBACI;AAAK,MAAA,KAAK,EAAE;AAAE+B,QAAAA,eAAe,EAAE/B,YAAY,CAACU,KAAhC;AAAuCsB,QAAAA,KAAK,EAAE;AAA9C,OAAZ;AAAA,6BACI;AAAA,kBACKhC,YAAY,CAACQ;AADlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GAXD;;AAaA,QAAMyB,SAAS,GAAG,MAAM;AACpB,wBACI;AAAM,MAAA,QAAQ,EAAErB,WAAhB;AAAA,6BACI;AAAA,gCACI;AAAO,UAAA,KAAK,EAAE;AAAEsB,YAAAA,OAAO,EAAE;AAAX,WAAd;AAAA,iCAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAApC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,KAAK,EAAEtC,QAA1B;AAAoC,UAAA,WAAW,EAAC,gBAAhD;AAAiE,UAAA,IAAI,EAAC,OAAtE;AAA8E,UAAA,QAAQ,EAAE,CAAC;AAAEuC,YAAAA;AAAF,WAAD,KAAgBtC,WAAW,CAACsC,MAAM,CAACC,KAAR,CAAnH;AAAmI,UAAA,QAAQ;AAA3I;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAO,UAAA,KAAK,EAAE;AAAEF,YAAAA,OAAO,EAAE;AAAX,WAAd;AAAA,iCAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAApC;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,KAAK,EAAEpC,QAA9B;AAAwC,UAAA,WAAW,EAAC,gBAApD;AAAqE,UAAA,IAAI,EAAC,KAA1E;AAAgF,UAAA,QAAQ,EAAE,CAAC;AAAEqC,YAAAA;AAAF,WAAD,KAAgBpC,WAAW,CAACoC,MAAM,CAACC,KAAR,CAArH;AAAqI,UAAA,QAAQ;AAA7I;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAQ,UAAA,KAAK,EAAE;AAAEF,YAAAA,OAAO,EAAE;AAAX,WAAf;AAAqC,UAAA,IAAI,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH,GAZD;;AAcA,QAAMG,UAAU,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAaH,KAAb,KAAuB;AACtC,UAAMhC,OAAO,GAAG,CAAC,GAAGZ,KAAJ,CAAhB;AACAY,IAAAA,OAAO,CAACkC,GAAD,CAAP,CAAaC,KAAb,IAAsBH,KAAtB;AACA3C,IAAAA,QAAQ,CAACW,OAAD,CAAR;AACH,GAJD;;AAMA,QAAMoC,SAAS,GAAG,MAAM;AACpBxB,IAAAA,OAAO,CAACC,GAAR,CAAYzB,KAAZ;AACA,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAGQA,KAAK,CAACiD,GAAN,CAAU,CAACC,IAAD,EAAOJ,GAAP,kBACN;AAAyB,QAAA,KAAK,EAAE;AAAEK,UAAAA,OAAO,EAAE,kBAAX;AAA+BC,UAAAA,MAAM,EAAE;AAAvC,SAAhC;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,UAAU,EAAE,CAACL,KAAD,EAAQH,KAAR,KAAkB;AAChCC,YAAAA,UAAU,CAACC,GAAD,EAAMC,KAAN,EAAaH,KAAb,CAAV;AACH,WAFD;AAEiB,UAAA,IAAI,EAAEM;AAFvB,WAEQA,IAAI,CAACG,EAFb;AAAA;AAAA;AAAA;AAAA;AADJ,SAAUC,IAAI,CAACC,MAAL,EAAV;AAAA;AAAA;AAAA;AAAA,cADJ,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH,GAhBD;;AAkBA,QAAMC,QAAQ,GAAG,MAAM;AACnB,wBACI;AAAA,8BACI;AAAA,oCAAiBtD,IAAI,CAACE,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAEgC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH,GAPD;;AASA,QAAMqB,YAAY,GAAG,MAAM;AACvB,wBACI;AAAA,8BACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,SAAD;AAAW,QAAA,GAAG,EAAE/C,WAAhB;AAA6B,QAAA,gBAAgB,EAAC,QAA9C;AAAuD,QAAA,eAAe,EAAC,cAAvE;AAAA,+BACI,QAAC,mBAAD;AAAqB,UAAA,OAAO,EAAEC;AAA9B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA,oBADJ;AASH,GAVD;;AAcAnB,EAAAA,SAAS,CAAC,MAAM;AACZgC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,QAAIvB,IAAI,GAAGyB,MAAM,CAACC,YAAP,CAAoB8B,OAApB,CAA4B,MAA5B,CAAX;AACAlC,IAAAA,OAAO,CAACC,GAAR,CAAYvB,IAAZ;AACAA,IAAAA,IAAI,GAAG4B,IAAI,CAAC6B,KAAL,CAAWzD,IAAX,CAAP;;AACA,QAAIA,IAAJ,EAAU;AACNC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAP,MAAAA,WAAW,CAACqC,QAAZ,CAAqB9B,IAAI,CAAC+B,KAA1B;AACH,KARW,CASZ;;;AACA,mBAAe2B,OAAf,GAAyB;AACrB,YAAM5D,KAAK,GAAG,MAAML,WAAW,CAACkE,MAAZ,EAApB;AACArC,MAAAA,OAAO,CAACC,GAAR,CAAYzB,KAAZ;AACAC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACA8D,MAAAA,SAAS,CAAC9D,KAAD,CAAT;AACH;;AACD4D,IAAAA,OAAO;AACV,GAjBQ,EAiBN,EAjBM,CAAT;;AAmBA,QAAME,SAAS,GAAI9D,KAAD,IAAW;AACzB,QAAI+D,WAAW,GAAG,CAAC,GAAG/D,KAAJ,CAAlB;AACA+D,IAAAA,WAAW,CAACC,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACvB,aAAOA,CAAC,CAACC,KAAF,GAAUF,CAAC,CAACE,KAAZ,GAAqB,CAAC,CAAtB,GACDD,CAAC,CAACC,KAAF,GAAUF,CAAC,CAACE,KAAZ,GAAoB,CAApB,GACI,CAFV;AAGH,KAJD;AAKAlE,IAAAA,QAAQ,CAAC8D,WAAD,CAAR;AACAvC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BsC,WAA5B;AACH,GATD;;AAWA,sBACI;AAAA,4BACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADJ,EAGQ7D,IAAI,GAAGuD,YAAY,EAAf,GAAoBhB,SAAS,EAHzC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAvKD;;GAAM1C,G;;KAAAA,G;AAyKN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Blog from './components/Blog'\nimport blogService from './services/blogs'\nimport userService from './services/user'\nimport CreateNewBlogWindow from './components/CreateNewBlogWindow'\nimport Togglable from './components/Togglable'\n\nconst App = () => {\n    const [blogs, setBlogs] = useState([])\n    const [user, setUser] = useState(null)\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [notification, setNotification] = useState(null)\n\n    const blogFormRef = useRef()\n\n    const addNewBlogLocal = (newBlog) => {\n        blogFormRef.current.toggleVisibility()\n        let newBlogs = [...blogs, newBlog]\n        setBlogs(newBlogs)\n        setNotification({\n            text: `${newBlog.title} added!`,\n            style: 'green'\n        })\n        setTimeout(() => {\n            setNotification(null)\n        }, 3000)\n    }\n\n    const handleLogin = async (event) => {\n        event.preventDefault()\n        const credentials = { username, password }\n        console.log('trying to log in', credentials)\n        try {\n            const user = await userService.signIn(credentials)\n            console.log(user)\n            setUser(user)\n            setUsername('')\n            setPassword('')\n\n            window.localStorage.setItem(\n                'user', JSON.stringify(user)\n            )\n            blogService.setToken(user.token)\n        }\n        catch (e) {\n            setNotification({\n                text: e.message,\n                style: 'red'\n            })\n            setTimeout(() => {\n                setNotification(null)\n            }, 5000)\n        }\n    }\n\n    const handleLogout = () => {\n        localStorage.clear()\n        setUser(null)\n        blogService.setToken(null)\n    }\n\n    const Notification = () => {\n        if (notification === null){\n            return (<></>)\n        }\n        return (\n            <div style={{ backgroundColor: notification.style, color: 'white' }}>\n                <h2>\n                    {notification.text}\n                </h2>\n            </div>\n        )\n    }\n\n    const LoginForm = () => {\n        return (\n            <form onSubmit={handleLogin}>\n                <div>\n                    <label style={{ display: 'block' }}><b>Username</b></label>\n                    <input type=\"text\" value={username} placeholder=\"Enter Username\" name=\"uname\" onChange={({ target }) => setUsername(target.value)} required/>\n                    <label style={{ display: 'block' }}><b>Password</b></label>\n                    <input type=\"password\" value={password} placeholder=\"Enter Password\" name=\"psw\" onChange={({ target }) => setPassword(target.value)} required/>\n                    <button style={{ display: 'block' }} type='submit'>submit</button>\n                </div>\n            </form>\n        )\n    }\n\n    const updateBlog = (idx, field, value) => {\n        const newBlog = [...blogs]\n        newBlog[idx][field] = value\n        setBlogs(newBlog)\n    }\n\n    const BlogsList = () => {\n        console.log(blogs)\n        return (\n            <div>\n                <h2>blogs</h2>\n                {\n                    blogs.map((blog, idx) =>\n                        <div key={Math.random()} style={{ outline: '1px dashed black', margin: '4px' }}>\n                            <Blog updateBlog={(field, value) => {\n                                updateBlog(idx, field, value)\n                            }} key={blog.id} blog={blog} ></Blog>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n\n    const UserInfo = () => {\n        return (\n            <div>\n                <p>logged in as {user.username}</p>\n                <button onClick={handleLogout}>logout</button>\n            </div>\n        )\n    }\n\n    const LoggedInView = () => {\n        return (\n            <>\n                <UserInfo></UserInfo>\n                <Togglable ref={blogFormRef} closeButtonLabel='cancel' openButtonLabel='add new blog'>\n                    <CreateNewBlogWindow addBlog={addNewBlogLocal}></CreateNewBlogWindow>\n                </Togglable>\n                <BlogsList/>\n            </>\n        )\n    }\n\n\n\n    useEffect(() => {\n        console.log('use effect ran')\n        let user = window.localStorage.getItem('user')\n        console.log(user)\n        user = JSON.parse(user)\n        if (user) {\n            setUser(user)\n            blogService.setToken(user.token)\n        }\n        //Async stuff\n        async function doStuff() {\n            const blogs = await blogService.getAll()\n            console.log(blogs)\n            setBlogs(blogs)\n            sortBlogs(blogs)\n        }\n        doStuff()\n    }, [])\n\n    const sortBlogs = (blogs) => {\n        let sortedBlogs = [...blogs]\n        sortedBlogs.sort((a, b) => {\n            return b.likes < a.likes ?  -1\n                : b.likes > a.likes ? 1\n                    : 0\n        })\n        setBlogs(sortedBlogs)\n        console.log('sorted blogs', sortedBlogs)\n    }\n\n    return (\n        <div>\n            <Notification></Notification>\n            {\n                user ? LoggedInView() : LoginForm()\n            }\n        </div>\n    )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}