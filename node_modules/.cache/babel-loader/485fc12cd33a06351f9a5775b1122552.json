{"ast":null,"code":"var _jsxFileName = \"/home/matias/codeprojects/fstack/blogilista-front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Blog from './components/Blog';\nimport blogService from './services/blogs';\nimport userService from './services/user';\nimport CreateNewBlogWindow from './components/CreateNewBlogWindow';\nimport Togglable from './components/Togglable';\nimport userEvent from '@testing-library/user-event';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [blogs, setBlogs] = useState([]);\n  const [user, setUser] = useState(null);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [notification, setNotification] = useState(null);\n  const blogFormRef = useRef();\n  const sortedBlogs = blogs.sort((a, b) => a > b);\n\n  const addNewBlogLocal = newBlog => {\n    blogFormRef.current.toggleVisibility();\n    let newBlogs = [...blogs, newBlog];\n    setBlogs(newBlogs);\n    setNotification({\n      text: `${newBlog.title} added!`,\n      style: 'green'\n    });\n    setTimeout(() => {\n      setNotification(null);\n    }, 3000);\n  };\n\n  const handleLogin = async event => {\n    event.preventDefault();\n    const credentials = {\n      username,\n      password\n    };\n    console.log('trying to log in', credentials);\n\n    try {\n      const user = await userService.signIn(credentials);\n      console.log(user);\n      setUser(user);\n      setUsername('');\n      setPassword('');\n      window.localStorage.setItem('user', JSON.stringify(user));\n      blogService.setToken(user.token);\n    } catch (e) {\n      setNotification({\n        text: e.message,\n        style: 'red'\n      });\n      setTimeout(() => {\n        setNotification(null);\n      }, 5000);\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.clear();\n    setUser(null);\n    blogService.setToken(null);\n  };\n\n  const Notification = () => {\n    if (notification === null) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: notification.style,\n        color: \"white\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: notification.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  };\n\n  const LoginForm = () => {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: \"block\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: username,\n          placeholder: \"Enter Username\",\n          name: \"uname\",\n          onChange: ({\n            target\n          }) => setUsername(target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: \"block\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          placeholder: \"Enter Password\",\n          name: \"psw\",\n          onChange: ({\n            target\n          }) => setPassword(target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            display: \"block\"\n          },\n          type: \"submit\",\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  };\n\n  const updateBlog = (idx, field, value) => {\n    const newBlog = [...blogs];\n    newBlog[idx][field] = value;\n    setBlogs(newBlog);\n  };\n\n  const BlogsList = () => {\n    console.log(blogs);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"blogs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), blogs.map((blog, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          outline: \"1px dashed black\",\n          margin: '4px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Blog, {\n          updateBlog: (field, value) => {\n            updateBlog(idx, field, value);\n          },\n          blog: blog\n        }, blog.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)\n      }, Math.random(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  };\n\n  const UserInfo = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"logged in as \", user.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        children: \"logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  };\n\n  const LoggedInView = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(UserInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Togglable, {\n        ref: blogFormRef,\n        closeButtonLabel: \"cancel\",\n        openButtonLabel: \"add new blog\",\n        children: /*#__PURE__*/_jsxDEV(CreateNewBlogWindow, {\n          addBlog: addNewBlogLocal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlogsList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  useEffect(() => {\n    console.log('use effect ran');\n    let user = window.localStorage.getItem('user');\n    console.log(user);\n    user = JSON.parse(user);\n\n    if (user) {\n      setUser(user);\n      blogService.setToken(user.token);\n    } //Async stuff\n\n\n    async function doStuff() {\n      const blogs = await blogService.getAll();\n      console.log(blogs);\n      setBlogs(blogs);\n    }\n\n    doStuff();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), user ? LoggedInView() : LoginForm()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"znDBIY8ssytrEiMASi2H43aPk/0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/matias/codeprojects/fstack/blogilista-front/src/App.js"],"names":["React","useState","useEffect","useRef","Blog","blogService","userService","CreateNewBlogWindow","Togglable","userEvent","App","blogs","setBlogs","user","setUser","username","setUsername","password","setPassword","notification","setNotification","blogFormRef","sortedBlogs","sort","a","b","addNewBlogLocal","newBlog","current","toggleVisibility","newBlogs","text","title","style","setTimeout","handleLogin","event","preventDefault","credentials","console","log","signIn","window","localStorage","setItem","JSON","stringify","setToken","token","e","message","handleLogout","clear","Notification","backgroundColor","color","LoginForm","display","target","value","updateBlog","idx","field","BlogsList","map","blog","outline","margin","id","Math","random","UserInfo","LoggedInView","getItem","parse","doStuff","getAll"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Blog from './components/Blog'\nimport blogService from './services/blogs'\nimport userService from './services/user'\nimport CreateNewBlogWindow from './components/CreateNewBlogWindow'\nimport Togglable from './components/Togglable'\nimport userEvent from '@testing-library/user-event'\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([])\n  const [user, setUser] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [notification, setNotification] = useState(null)\n\n  const blogFormRef = useRef()\n\n  const sortedBlogs = blogs.sort((a, b) => a>b)\n\n  const addNewBlogLocal = (newBlog) => {\n    blogFormRef.current.toggleVisibility()\n    let newBlogs = [...blogs, newBlog]\n    setBlogs(newBlogs)\n    setNotification({\n      text: `${newBlog.title} added!`,\n      style: 'green'\n    })\n    setTimeout(() => {\n      setNotification(null)\n    }, 3000);\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    const credentials = {username, password}\n    console.log('trying to log in', credentials);\n    try {\n      const user = await userService.signIn(credentials)\n      console.log(user);\n      setUser(user)\n      setUsername('')\n      setPassword('')\n\n      window.localStorage.setItem(\n        'user', JSON.stringify(user)\n      )\n      blogService.setToken(user.token)\n    }\n    catch (e) {\n      setNotification({\n        text: e.message,\n        style: 'red'\n      })\n      setTimeout(() => {\n        setNotification(null)\n      }, 5000);\n    }\n  }\n\n  const handleLogout = () => {\n    localStorage.clear()\n    setUser(null)\n    blogService.setToken(null)\n  }\n\n  const Notification = () => {\n    if (notification === null){\n      return (<></>)\n    }\n    return (\n      <div style={{backgroundColor: notification.style, color: \"white\"}}>\n        <h2>\n          {notification.text}\n        </h2>\n      </div>\n    )\n  }\n\n  const LoginForm = () => {\n    return (\n      <form onSubmit={handleLogin}>\n        <div>\n          <label style={{display: \"block\"}}><b>Username</b></label>\n          <input type=\"text\" value={username} placeholder=\"Enter Username\" name=\"uname\" onChange={({target}) => setUsername(target.value)} required/>\n          <label style={{display: \"block\"}}><b>Password</b></label>\n          <input type=\"password\" value={password} placeholder=\"Enter Password\" name=\"psw\" onChange={({target}) => setPassword(target.value)} required/>\n          <button style={{display: \"block\"}} type='submit'>submit</button>\n        </div>\n    </form>\n    )\n  }\n\n  const updateBlog = (idx, field, value) => {\n    const newBlog = [...blogs]\n    newBlog[idx][field] = value\n    setBlogs(newBlog)\n  }\n\n  const BlogsList = () => {\n    console.log(blogs)\n    return (\n      <div>\n        <h2>blogs</h2>\n        {\n        blogs.map((blog, idx) =>\n          <div key={Math.random()} style={{outline: \"1px dashed black\", margin: '4px'}}>\n            <Blog updateBlog={(field, value) => {\n              updateBlog(idx, field, value)\n            }} key={blog.id} blog={blog} ></Blog>\n          </div>\n        )\n        }\n      </div>\n    )\n  }\n\n  const UserInfo = () => {\n    return (\n      <div>\n        <p>logged in as {user.username}</p>\n        <button onClick={handleLogout}>logout</button>\n      </div>\n    )\n  }\n\n  const LoggedInView = () => {\n    return (\n      <>\n        <UserInfo></UserInfo>\n        <Togglable ref={blogFormRef} closeButtonLabel='cancel' openButtonLabel='add new blog'>\n         <CreateNewBlogWindow addBlog={addNewBlogLocal}></CreateNewBlogWindow>\n        </Togglable>\n        <BlogsList/>    \n      </>\n    )\n  }\n\n\n\n  useEffect(() => {\n    console.log('use effect ran')\n    let user = window.localStorage.getItem('user')\n    console.log(user);\n    user = JSON.parse(user)\n    if (user) {\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n    //Async stuff\n    async function doStuff() {\n      const blogs = await blogService.getAll()\n      console.log(blogs);\n      setBlogs(blogs)\n    }\n    doStuff()\n  }, [])\n\n  return (\n    <div>\n      <Notification></Notification>\n      {\n        user ? LoggedInView() : LoginForm()\n      }\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}