{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWindowFromNode = getWindowFromNode;\nexports.getDocument = getDocument;\nexports.runWithRealTimers = runWithRealTimers;\nexports.checkContainerType = checkContainerType;\nexports.TEXT_NODE = exports.jestFakeTimersAreEnabled = exports.setTimeout = exports.setImmediate = exports.clearTimeout = void 0;\nconst globalObj = typeof window === 'undefined' ? global : window; // Constant node.nodeType for text nodes, see:\n// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#Node_type_constants\n\nconst TEXT_NODE = 3; // Currently this fn only supports jest timers, but it could support other test runners in the future.\n\nexports.TEXT_NODE = TEXT_NODE;\n\nfunction runWithRealTimers(callback) {\n  const fakeTimersType = getJestFakeTimersType();\n\n  if (fakeTimersType) {\n    jest.useRealTimers();\n  }\n\n  const callbackReturnValue = callback();\n\n  if (fakeTimersType) {\n    jest.useFakeTimers(fakeTimersType);\n  }\n\n  return callbackReturnValue;\n}\n\nfunction getJestFakeTimersType() {\n  // istanbul ignore if\n  if (typeof jest === 'undefined' || typeof globalObj.setTimeout === 'undefined') {\n    return null;\n  }\n\n  if (typeof globalObj.setTimeout._isMockFunction !== 'undefined' && globalObj.setTimeout._isMockFunction) {\n    return 'legacy';\n  }\n\n  if (typeof globalObj.setTimeout.clock !== 'undefined' && typeof jest.getRealSystemTime !== 'undefined') {\n    try {\n      // jest.getRealSystemTime is only supported for Jest's `modern` fake timers and otherwise throws\n      jest.getRealSystemTime();\n      return 'modern';\n    } catch {// not using Jest's modern fake timers\n    }\n  }\n\n  return null;\n}\n\nconst jestFakeTimersAreEnabled = () => Boolean(getJestFakeTimersType()); // we only run our tests in node, and setImmediate is supported in node.\n// istanbul ignore next\n\n\nexports.jestFakeTimersAreEnabled = jestFakeTimersAreEnabled;\n\nfunction setImmediatePolyfill(fn) {\n  return globalObj.setTimeout(fn, 0);\n}\n\nfunction getTimeFunctions() {\n  // istanbul ignore next\n  return {\n    clearTimeoutFn: globalObj.clearTimeout,\n    setImmediateFn: globalObj.setImmediate || setImmediatePolyfill,\n    setTimeoutFn: globalObj.setTimeout\n  };\n}\n\nconst {\n  clearTimeoutFn,\n  setImmediateFn,\n  setTimeoutFn\n} = runWithRealTimers(getTimeFunctions);\nexports.setTimeout = setTimeoutFn;\nexports.setImmediate = setImmediateFn;\nexports.clearTimeout = clearTimeoutFn;\n\nfunction getDocument() {\n  /* istanbul ignore if */\n  if (typeof window === 'undefined') {\n    throw new Error('Could not find default container');\n  }\n\n  return window.document;\n}\n\nfunction getWindowFromNode(node) {\n  if (node.defaultView) {\n    // node is document\n    return node.defaultView;\n  } else if (node.ownerDocument && node.ownerDocument.defaultView) {\n    // node is a DOM node\n    return node.ownerDocument.defaultView;\n  } else if (node.window) {\n    // node is window\n    return node.window;\n  } else if (node.then instanceof Function) {\n    throw new Error(`It looks like you passed a Promise object instead of a DOM node. Did you do something like \\`fireEvent.click(screen.findBy...\\` when you meant to use a \\`getBy\\` query \\`fireEvent.click(screen.getBy...\\`, or await the findBy query \\`fireEvent.click(await screen.findBy...\\`?`);\n  } else {\n    // The user passed something unusual to a calling function\n    throw new Error(`Unable to find the \"window\" object for the given node. Please file an issue with the code that's causing you to see this error: https://github.com/testing-library/dom-testing-library/issues/new`);\n  }\n}\n\nfunction checkContainerType(container) {\n  if (!container || !(typeof container.querySelector === 'function') || !(typeof container.querySelectorAll === 'function')) {\n    throw new TypeError(`Expected container to be an Element, a Document or a DocumentFragment but got ${getTypeName(container)}.`);\n  }\n\n  function getTypeName(object) {\n    if (typeof object === 'object') {\n      return object === null ? 'null' : object.constructor.name;\n    }\n\n    return typeof object;\n  }\n}","map":{"version":3,"sources":["/home/matias/codeprojects/fstack/blogilista-front/node_modules/@testing-library/dom/dist/helpers.js"],"names":["Object","defineProperty","exports","value","getWindowFromNode","getDocument","runWithRealTimers","checkContainerType","TEXT_NODE","jestFakeTimersAreEnabled","setTimeout","setImmediate","clearTimeout","globalObj","window","global","callback","fakeTimersType","getJestFakeTimersType","jest","useRealTimers","callbackReturnValue","useFakeTimers","_isMockFunction","clock","getRealSystemTime","Boolean","setImmediatePolyfill","fn","getTimeFunctions","clearTimeoutFn","setImmediateFn","setTimeoutFn","Error","document","node","defaultView","ownerDocument","then","Function","container","querySelector","querySelectorAll","TypeError","getTypeName","object","constructor","name"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWindowFromNode = getWindowFromNode;\nexports.getDocument = getDocument;\nexports.runWithRealTimers = runWithRealTimers;\nexports.checkContainerType = checkContainerType;\nexports.TEXT_NODE = exports.jestFakeTimersAreEnabled = exports.setTimeout = exports.setImmediate = exports.clearTimeout = void 0;\nconst globalObj = typeof window === 'undefined' ? global : window; // Constant node.nodeType for text nodes, see:\n// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#Node_type_constants\n\nconst TEXT_NODE = 3; // Currently this fn only supports jest timers, but it could support other test runners in the future.\n\nexports.TEXT_NODE = TEXT_NODE;\n\nfunction runWithRealTimers(callback) {\n  const fakeTimersType = getJestFakeTimersType();\n\n  if (fakeTimersType) {\n    jest.useRealTimers();\n  }\n\n  const callbackReturnValue = callback();\n\n  if (fakeTimersType) {\n    jest.useFakeTimers(fakeTimersType);\n  }\n\n  return callbackReturnValue;\n}\n\nfunction getJestFakeTimersType() {\n  // istanbul ignore if\n  if (typeof jest === 'undefined' || typeof globalObj.setTimeout === 'undefined') {\n    return null;\n  }\n\n  if (typeof globalObj.setTimeout._isMockFunction !== 'undefined' && globalObj.setTimeout._isMockFunction) {\n    return 'legacy';\n  }\n\n  if (typeof globalObj.setTimeout.clock !== 'undefined' && typeof jest.getRealSystemTime !== 'undefined') {\n    try {\n      // jest.getRealSystemTime is only supported for Jest's `modern` fake timers and otherwise throws\n      jest.getRealSystemTime();\n      return 'modern';\n    } catch {// not using Jest's modern fake timers\n    }\n  }\n\n  return null;\n}\n\nconst jestFakeTimersAreEnabled = () => Boolean(getJestFakeTimersType()); // we only run our tests in node, and setImmediate is supported in node.\n// istanbul ignore next\n\n\nexports.jestFakeTimersAreEnabled = jestFakeTimersAreEnabled;\n\nfunction setImmediatePolyfill(fn) {\n  return globalObj.setTimeout(fn, 0);\n}\n\nfunction getTimeFunctions() {\n  // istanbul ignore next\n  return {\n    clearTimeoutFn: globalObj.clearTimeout,\n    setImmediateFn: globalObj.setImmediate || setImmediatePolyfill,\n    setTimeoutFn: globalObj.setTimeout\n  };\n}\n\nconst {\n  clearTimeoutFn,\n  setImmediateFn,\n  setTimeoutFn\n} = runWithRealTimers(getTimeFunctions);\nexports.setTimeout = setTimeoutFn;\nexports.setImmediate = setImmediateFn;\nexports.clearTimeout = clearTimeoutFn;\n\nfunction getDocument() {\n  /* istanbul ignore if */\n  if (typeof window === 'undefined') {\n    throw new Error('Could not find default container');\n  }\n\n  return window.document;\n}\n\nfunction getWindowFromNode(node) {\n  if (node.defaultView) {\n    // node is document\n    return node.defaultView;\n  } else if (node.ownerDocument && node.ownerDocument.defaultView) {\n    // node is a DOM node\n    return node.ownerDocument.defaultView;\n  } else if (node.window) {\n    // node is window\n    return node.window;\n  } else if (node.then instanceof Function) {\n    throw new Error(`It looks like you passed a Promise object instead of a DOM node. Did you do something like \\`fireEvent.click(screen.findBy...\\` when you meant to use a \\`getBy\\` query \\`fireEvent.click(screen.getBy...\\`, or await the findBy query \\`fireEvent.click(await screen.findBy...\\`?`);\n  } else {\n    // The user passed something unusual to a calling function\n    throw new Error(`Unable to find the \"window\" object for the given node. Please file an issue with the code that's causing you to see this error: https://github.com/testing-library/dom-testing-library/issues/new`);\n  }\n}\n\nfunction checkContainerType(container) {\n  if (!container || !(typeof container.querySelector === 'function') || !(typeof container.querySelectorAll === 'function')) {\n    throw new TypeError(`Expected container to be an Element, a Document or a DocumentFragment but got ${getTypeName(container)}.`);\n  }\n\n  function getTypeName(object) {\n    if (typeof object === 'object') {\n      return object === null ? 'null' : object.constructor.name;\n    }\n\n    return typeof object;\n  }\n}"]},"metadata":{},"sourceType":"script"}